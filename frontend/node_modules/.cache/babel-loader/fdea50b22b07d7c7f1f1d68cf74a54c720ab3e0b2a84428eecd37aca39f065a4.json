{"ast":null,"code":"/**\r\n * API service module for handling all HTTP requests to the backend\r\n * Centralizes all API calls for easier maintenance\r\n */const API_BASE=process.env.NODE_ENV===\"production\"?\"\":\"http://localhost:3002\";/**\r\n * Fetches all cars from the backend API\r\n * @returns {Promise} Promise that resolves to the list of cars\r\n */export const getCars=async()=>{try{const response=await fetch(\"\".concat(API_BASE,\"/api\"));if(!response.ok){throw new Error(\"Failed to fetch cars\");}const data=await response.json();return data.data;// Your server returns {success: true, data: cars}\n}catch(error){console.error(\"Error fetching cars:\",error);throw error;}};/**\r\n * Adds a new car to the database\r\n * @param {Object} carData - The car object to add\r\n * @returns {Promise} Promise that resolves to the added car\r\n */export const addCar=async carData=>{try{const response=await fetch(\"\".concat(API_BASE,\"/api\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(carData)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||\"Failed to add car\");}const data=await response.json();return data.data;// Your server returns {success: true, data: newCar}\n}catch(error){console.error(\"Error adding car:\",error);throw error;}};/**\r\n * Updates an existing car\r\n * @param {number} id - The ID of the car to update\r\n * @param {Object} carData - The updated car data\r\n * @returns {Promise} Promise that resolves to the updated car\r\n */export const updateCar=async(id,carData)=>{try{const response=await fetch(\"\".concat(API_BASE,\"/api/\").concat(id),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(carData)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||\"Failed to update car\");}const data=await response.json();return data.data;// Your server returns {success: true, data: updatedCar}\n}catch(error){console.error(\"Error updating car:\",error);throw error;}};/**\r\n * Deletes a car from the database\r\n * @param {number} id - The ID of the car to delete\r\n * @returns {Promise} Promise that resolves when the car is deleted\r\n */export const deleteCar=async id=>{try{const response=await fetch(\"\".concat(API_BASE,\"/api/\").concat(id),{method:\"DELETE\"});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||\"Failed to delete car\");}const data=await response.json();return data.data;// Your server returns {success: true, data: deletedCar}\n}catch(error){console.error(\"Error deleting car:\",error);throw error;}};","map":{"version":3,"names":["API_BASE","process","env","NODE_ENV","getCars","response","fetch","concat","ok","Error","data","json","error","console","addCar","carData","method","headers","body","JSON","stringify","errorData","updateCar","id","deleteCar"],"sources":["C:/Users/Lukhanyo/Car Management/frontend/src/services/api.js"],"sourcesContent":["/**\r\n * API service module for handling all HTTP requests to the backend\r\n * Centralizes all API calls for easier maintenance\r\n */\r\n\r\nconst API_BASE =\r\n  process.env.NODE_ENV === \"production\" ? \"\" : \"http://localhost:3002\";\r\n\r\n/**\r\n * Fetches all cars from the backend API\r\n * @returns {Promise} Promise that resolves to the list of cars\r\n */\r\nexport const getCars = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch cars\");\r\n    }\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: cars}\r\n  } catch (error) {\r\n    console.error(\"Error fetching cars:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a new car to the database\r\n * @param {Object} carData - The car object to add\r\n * @returns {Promise} Promise that resolves to the added car\r\n */\r\nexport const addCar = async (carData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(carData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to add car\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: newCar}\r\n  } catch (error) {\r\n    console.error(\"Error adding car:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates an existing car\r\n * @param {number} id - The ID of the car to update\r\n * @param {Object} carData - The updated car data\r\n * @returns {Promise} Promise that resolves to the updated car\r\n */\r\nexport const updateCar = async (id, carData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(carData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to update car\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: updatedCar}\r\n  } catch (error) {\r\n    console.error(\"Error updating car:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Deletes a car from the database\r\n * @param {number} id - The ID of the car to delete\r\n * @returns {Promise} Promise that resolves when the car is deleted\r\n */\r\nexport const deleteCar = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to delete car\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: deletedCar}\r\n  } catch (error) {\r\n    console.error(\"Error deleting car:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}