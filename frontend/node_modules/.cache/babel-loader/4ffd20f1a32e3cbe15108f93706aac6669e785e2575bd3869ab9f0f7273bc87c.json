{"ast":null,"code":"/**\r\n * API service module for handling all HTTP requests to the backend\r\n * Centralizes all API calls for easier maintenance\r\n * Updated to match your server's API structure\r\n */\n\nconst API_BASE = process.env.NODE_ENV === \"production\" ? \"\" : \"http://localhost:3002\";\n\n/**\r\n * Fetches all cars from the backend API\r\n * @returns {Promise} Promise that resolves to the list of cars\r\n */\nexport const getCars = async () => {\n  try {\n    const response = await fetch(`${API_BASE}/api`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cars\");\n    }\n    const data = await response.json();\n    return data.data; // Your server returns {success: true, data: cars}\n  } catch (error) {\n    console.error(\"Error fetching cars:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Adds a new car to the database\r\n * @param {Object} carData - The car object to add\r\n * @returns {Promise} Promise that resolves to the added car\r\n */\nexport const addCar = async carData => {\n  try {\n    const response = await fetch(`${API_BASE}/api`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(carData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to add car\");\n    }\n    const data = await response.json();\n    return data.data; // Your server returns {success: true, data: newCar}\n  } catch (error) {\n    console.error(\"Error adding car:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Updates an existing car\r\n * @param {number} id - The ID of the car to update\r\n * @param {Object} carData - The updated car data\r\n * @returns {Promise} Promise that resolves to the updated car\r\n */\nexport const updateCar = async (id, carData) => {\n  try {\n    const response = await fetch(`${API_BASE}/api/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(carData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to update car\");\n    }\n    const data = await response.json();\n    return data.data; // Your server returns {success: true, data: updatedCar}\n  } catch (error) {\n    console.error(\"Error updating car:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Deletes a car from the database\r\n * @param {number} id - The ID of the car to delete\r\n * @returns {Promise} Promise that resolves when the car is deleted\r\n */\nexport const deleteCar = async id => {\n  try {\n    const response = await fetch(`${API_BASE}/api/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to delete car\");\n    }\n    const data = await response.json();\n    return data.data; // Your server returns {success: true, data: deletedCar}\n  } catch (error) {\n    console.error(\"Error deleting car:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE","process","env","NODE_ENV","getCars","response","fetch","ok","Error","data","json","error","console","addCar","carData","method","headers","body","JSON","stringify","errorData","updateCar","id","deleteCar"],"sources":["C:/Users/Lukhanyo/Car Management/frontend/src/services/api.js"],"sourcesContent":["/**\r\n * API service module for handling all HTTP requests to the backend\r\n * Centralizes all API calls for easier maintenance\r\n * Updated to match your server's API structure\r\n */\r\n\r\nconst API_BASE =\r\n  process.env.NODE_ENV === \"production\" ? \"\" : \"http://localhost:3002\";\r\n\r\n/**\r\n * Fetches all cars from the backend API\r\n * @returns {Promise} Promise that resolves to the list of cars\r\n */\r\nexport const getCars = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api`);\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch cars\");\r\n    }\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: cars}\r\n  } catch (error) {\r\n    console.error(\"Error fetching cars:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a new car to the database\r\n * @param {Object} carData - The car object to add\r\n * @returns {Promise} Promise that resolves to the added car\r\n */\r\nexport const addCar = async (carData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(carData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to add car\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: newCar}\r\n  } catch (error) {\r\n    console.error(\"Error adding car:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates an existing car\r\n * @param {number} id - The ID of the car to update\r\n * @param {Object} carData - The updated car data\r\n * @returns {Promise} Promise that resolves to the updated car\r\n */\r\nexport const updateCar = async (id, carData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(carData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to update car\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: updatedCar}\r\n  } catch (error) {\r\n    console.error(\"Error updating car:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Deletes a car from the database\r\n * @param {number} id - The ID of the car to delete\r\n * @returns {Promise} Promise that resolves when the car is deleted\r\n */\r\nexport const deleteCar = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/api/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || \"Failed to delete car\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data; // Your server returns {success: true, data: deletedCar}\r\n  } catch (error) {\r\n    console.error(\"Error deleting car:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GACZC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,EAAE,GAAG,uBAAuB;;AAEtE;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,MAAM,CAAC;IAC/C,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,MAAM,GAAG,MAAOC,OAAO,IAAK;EACvC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,MAAM,EAAE;MAC9Ce,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMa,SAAS,GAAG,MAAMf,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIF,KAAK,CAACY,SAAS,CAACT,KAAK,IAAI,mBAAmB,CAAC;IACzD;IAEA,MAAMF,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,SAAS,GAAG,MAAAA,CAAOC,EAAE,EAAER,OAAO,KAAK;EAC9C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,QAAQsB,EAAE,EAAE,EAAE;MACpDP,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMa,SAAS,GAAG,MAAMf,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIF,KAAK,CAACY,SAAS,CAACT,KAAK,IAAI,sBAAsB,CAAC;IAC5D;IAEA,MAAMF,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,SAAS,GAAG,MAAOD,EAAE,IAAK;EACrC,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,QAAQsB,EAAE,EAAE,EAAE;MACpDP,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMa,SAAS,GAAG,MAAMf,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIF,KAAK,CAACY,SAAS,CAACT,KAAK,IAAI,sBAAsB,CAAC;IAC5D;IAEA,MAAMF,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}